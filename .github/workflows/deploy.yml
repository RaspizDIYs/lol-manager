name: Deploy Releases

on:
  push:
    branches:
      - master
      - develop

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version and Validate
        id: get-version
        shell: bash
        run: |
          set -e  # Exit on any error
          
          # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ .csproj —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Å–∏—é
          if ! grep -q '<Version>' LolManager.csproj; then
            echo "‚ùå ERROR: No <Version> tag found in LolManager.csproj"
            exit 1
          fi
          
          CURRENT_VERSION=$(grep -oE '<Version>[^<]+' LolManager.csproj | sed 's/<Version>//')
          echo "Current version in csproj: $CURRENT_VERSION"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç X.Y.Z –∏–ª–∏ X.Y.Z-beta.XX)
          if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?$ ]]; then
            echo "‚ùå ERROR: Invalid version format in csproj: $CURRENT_VERSION (expected: X.Y.Z or X.Y.Z-beta.XX)"
            exit 1
          fi
          
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            # –î–ª—è master –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            echo "Checking if version was updated for stable release..."
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            echo "Fetching latest stable release from GitHub API..."
            
            API_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            
            HTTP_STATUS=$(echo "$API_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$API_RESPONSE" | sed '/HTTP_STATUS:/d')
            
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "‚ùå ERROR: GitHub API request failed with status $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ jq –¥–æ—Å—Ç—É–ø–µ–Ω
            if ! command -v jq &> /dev/null; then
              echo "‚ùå ERROR: jq is not installed"
              exit 1
            fi
            
            LAST_RELEASE=$(echo "$RESPONSE_BODY" | jq -r '[.[] | select(.prerelease == false)][0].tag_name // "v0.0.0"')
            
            if [ "$?" != "0" ]; then
              echo "‚ùå ERROR: Failed to parse GitHub API response with jq"
              exit 1
            fi
            
            LAST_VERSION=${LAST_RELEASE#v}
            echo "Last stable release version: $LAST_VERSION"
            
            if [ "$CURRENT_VERSION" == "$LAST_VERSION" ]; then
              echo "‚ùå ERROR: Version in csproj ($CURRENT_VERSION) matches last release ($LAST_VERSION)"
              echo "Please update version in LolManager.csproj before pushing to master"
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            if ! printf '%s\n%s\n' "$LAST_VERSION" "$CURRENT_VERSION" | sort -V -C; then
              echo "‚ùå ERROR: New version ($CURRENT_VERSION) is not greater than last version ($LAST_VERSION)"
              exit 1
            fi
            
            echo "‚úÖ Version check passed: $CURRENT_VERSION > $LAST_VERSION"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            
          else
            # –î–ª—è develop –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º beta –≤–µ—Ä—Å–∏—è–º–∏
            echo "Managing beta version from: $CURRENT_VERSION"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑
            API_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            
            HTTP_STATUS=$(echo "$API_RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$API_RESPONSE" | sed '/HTTP_STATUS:/d')
            
            if [ "$HTTP_STATUS" == "200" ]; then
              LATEST_STABLE=$(echo "$RESPONSE_BODY" | jq -r '[.[] | select(.prerelease == false)][0].tag_name // "v0.0.0"')
              LATEST_STABLE_VERSION=${LATEST_STABLE#v}
              echo "Latest stable version: $LATEST_STABLE_VERSION"
            else
              echo "‚ö†Ô∏è WARNING: Failed to fetch releases, using fallback"
              LATEST_STABLE_VERSION="0.1.26"
            fi
            
            if [[ "$CURRENT_VERSION" =~ -beta\.[0-9]+$ ]]; then
              # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ beta - –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º
              BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-beta\.[0-9]*$//')
              CURRENT_BETA=$(echo "$CURRENT_VERSION" | grep -oE 'beta\.([0-9]+)' | cut -d. -f2)
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–æ latest stable
              if [ "$BASE_VERSION" != "$LATEST_STABLE_VERSION" ]; then
                echo "Updating base version from $BASE_VERSION to $LATEST_STABLE_VERSION"
                NEW_VERSION="${LATEST_STABLE_VERSION}-beta.1"
              else
                NEXT_BETA=$((CURRENT_BETA + 1))
                NEW_VERSION="${BASE_VERSION}-beta.${NEXT_BETA}"
              fi
            else
              # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è - —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é beta –Ω–∞ –±–∞–∑–µ latest stable
              echo "Creating first beta for stable version $LATEST_STABLE_VERSION"
              NEW_VERSION="${LATEST_STABLE_VERSION}-beta.1"
            fi
            
            echo "New version: $NEW_VERSION"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ .csproj —Ñ–∞–π–ª–µ  
            sed -i "s/<Version>${CURRENT_VERSION}<\/Version>/<Version>${NEW_VERSION}<\/Version>/" LolManager.csproj
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å [skip ci] —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow —Å–Ω–æ–≤–∞
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"  
            git add LolManager.csproj
            git commit -m "Auto-increment version to ${NEW_VERSION} [skip ci]"
            git push
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish Application
        shell: bash
        run: |
          echo "Publishing .NET application..."
          dotnet publish LolManager.csproj -c Release -o publish -r win-x64 --self-contained true
          
          if [ ! -d "publish" ]; then
            echo "‚ùå ERROR: Publish directory not created"
            exit 1
          fi
          
          if [ ! -f "publish/LolManager.exe" ]; then
            echo "‚ùå ERROR: LolManager.exe not found in publish directory"
            exit 1
          fi
          
          echo "‚úÖ Application published successfully"

      - name: Create Stable Release
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: |
          echo "Creating stable release v${{ steps.get-version.outputs.version }}..."
          
          echo "Installing Velopack CLI..."
          dotnet tool install -g vpk
          if [ "$?" != "0" ]; then
            echo "‚ùå ERROR: Failed to install vpk tool"
            exit 1
          fi
          
          echo "Downloading existing releases..."
          vpk download github --repoUrl https://github.com/${{ github.repository }} --token ${{ secrets.GITHUB_TOKEN }}
          if [ "$?" != "0" ]; then
            echo "‚ö†Ô∏è  WARNING: Failed to download existing releases (this is OK for first release)"
          fi
          
          echo "Packing application..."
          vpk pack -u LolManager -v ${{ steps.get-version.outputs.version }} -p publish --channel stable
          if [ "$?" != "0" ]; then
            echo "‚ùå ERROR: Failed to pack application"
            exit 1
          fi
          
          echo "Uploading release to GitHub..."
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --releaseName "v${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --channel stable --token ${{ secrets.GITHUB_TOKEN }}
          if [ "$?" != "0" ]; then
            echo "‚ùå ERROR: Failed to upload release to GitHub"
            exit 1
          fi
          
          echo "Adding release notes and ensuring stable release settings..."
          sleep 3
          
          # –°–æ–∑–¥–∞–µ–º JSON —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ printf –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
          printf '{"body":"## üéâ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\\n\\n### ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è:\\n- –ü–æ–≤—ã—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\\n- –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏\\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–ª–∫–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏\\n- –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\\n\\n### üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\\n- **–ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞**: –°–∫–∞—á–∞–π—Ç–µ LolManager-stable-Setup.exe\\n- **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\\n\\n---\\nüí° *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–µ–µ? –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ beta –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!*","prerelease":false,"make_latest":"true"}' > /tmp/stable_release.json
          
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json; charset=utf-8" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get-version.outputs.version }}" \
            -d @/tmp/stable_release.json
          
          echo "‚úÖ Release notes added and stable release properly configured"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ stable —Ä–µ–ª–∏–∑ —Å—Ç–∞–ª latest
          sleep 2
          LATEST_RELEASE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r '.tag_name')
          
          if [ "$LATEST_RELEASE" = "v${{ steps.get-version.outputs.version }}" ]; then
            echo "‚úÖ Stable release is latest: $LATEST_RELEASE"
          fi
          
          echo "‚úÖ Stable release created successfully"

      - name: Create Beta Release
        if: github.ref == 'refs/heads/develop'
        shell: bash
        run: |
          echo "Creating beta release v${{ steps.get-version.outputs.version }}..."
          
          echo "Installing Velopack CLI..."
          dotnet tool install -g vpk
          if [ "$?" != "0" ]; then
            echo "‚ùå ERROR: Failed to install vpk tool"
            exit 1
          fi
          
          echo "Downloading existing beta releases..."
          vpk download github --repoUrl https://github.com/${{ github.repository }} --channel beta --token ${{ secrets.GITHUB_TOKEN }}
          if [ "$?" != "0" ]; then
            echo "‚ö†Ô∏è  WARNING: Failed to download existing beta releases (this is OK for first beta release)"
          fi
          
          echo "Packing beta application..."
          vpk pack -u LolManager -v ${{ steps.get-version.outputs.version }} -p publish --channel beta
          if [ "$?" != "0" ]; then
            echo "‚ùå ERROR: Failed to pack beta application"
            exit 1
          fi
          
          vpk upload github --repoUrl https://github.com/${{ github.repository }} --publish --releaseName "v${{ steps.get-version.outputs.version }}" --tag v${{ steps.get-version.outputs.version }} --channel beta --token ${{ secrets.GITHUB_TOKEN }}
          
          # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ pre-release
          sleep 5
          
          RELEASE_RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get-version.outputs.version }}")
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ] && [ "$RELEASE_ID" != "" ]; then
            # –°–æ–∑–¥–∞–µ–º JSON —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ printf –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏  
            printf '{"body":"## Beta –≤–µ—Ä—Å–∏—è - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\\n\\n### –°–≤–µ–∂–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:\\n- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\\n- –£–ª—É—á—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\\n- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\n\\n### ‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\\n- –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞\\n- –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–µ–¥–æ—á–µ—Ç—ã\\n- –ü–æ–º–æ–≥–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Å–æ–æ–±—â–∞–π—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\\n\\n### üîß –ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å beta-–≤–µ—Ä—Å–∏–∏:\\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\\n2. –ò–∑–º–µ–Ω–∏—Ç–µ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ beta\\n3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\\n\\n---\\n‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! –í–∞—à–∞ –ø–æ–º–æ—â—å –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª—É—á—à–µ.*","prerelease":true,"make_latest":"false"}' > /tmp/beta_release.json
            
            curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json; charset=utf-8" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              -d @/tmp/beta_release.json > /dev/null
            
            echo "‚úÖ Beta release marked as pre-release"
          else
            echo "‚ùå ERROR: Could not find release to mark as pre-release"
            exit 1
          fi
          
          echo "‚úÖ Beta release created successfully"
