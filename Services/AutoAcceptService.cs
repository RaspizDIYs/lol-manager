using System;
using System.IO;
using System.Net.Http;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace LolManager.Services;

public class AutoAcceptService
{
    private readonly ILogger _logger;
    private readonly IRiotClientService _riotClientService;
    private bool _isEnabled = false;
    private CancellationTokenSource? _cancellationTokenSource;
    private Task? _websocketTask;
    private double _lastAcceptedReadyCheckTimer = -1;
    
    public event EventHandler<string>? MatchAccepted;

    public AutoAcceptService(ILogger logger, IRiotClientService riotClientService)
    {
        _logger = logger;
        _riotClientService = riotClientService;
    }
    
    public void SetEnabled(bool enabled)
    {
        if (_isEnabled == enabled) return;
        
        _isEnabled = enabled;
        
        if (enabled)
        {
            _cancellationTokenSource = new CancellationTokenSource();
            _websocketTask = Task.Run(() => RunWebSocketListenerAsync(_cancellationTokenSource.Token));
            _logger.Info("–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∏–≥—Ä—ã –≤–∫–ª—é—á–µ–Ω–æ (WebSocket)");
        }
        else
        {
            _cancellationTokenSource?.Cancel();
            _websocketTask = null;
            _logger.Info("–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∏–≥—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω–æ");
        }
    }
    
    private async Task RunWebSocketListenerAsync(CancellationToken cancellationToken)
    {
        _logger.Info("AutoAccept: WebSocket listener –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ LCU...");
        
        while (!cancellationToken.IsCancellationRequested)
        {
            try
            {
                _logger.Info("AutoAccept: –ü–æ–∏—Å–∫ LCU lockfile...");
                var lcuInfo = await FindLcuLockfileInfoAsync();
                if (lcuInfo == null)
                {
                    _logger.Info("AutoAccept: LCU lockfile –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥—É 3 —Å–µ–∫...");
                    await Task.Delay(3000, cancellationToken);
                    continue;
                }
                
                var (port, password) = lcuInfo.Value;
                _logger.Info($"AutoAccept: LCU –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}, –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ WebSocket...");
                
                await ConnectWebSocketAsync(port, password, cancellationToken);
            }
            catch (OperationCanceledException)
            {
                _logger.Info("AutoAccept: WebSocket listener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                break;
            }
            catch (Exception ex)
            {
                _logger.Error($"AutoAccept WebSocket –æ—à–∏–±–∫–∞: {ex.GetType().Name} - {ex.Message}");
                _logger.Warning($"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...");
                try
                {
                    await Task.Delay(5000, cancellationToken);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
            }
        }
    }
    
    private async Task ConnectWebSocketAsync(int port, string password, CancellationToken cancellationToken)
    {
        using var ws = new ClientWebSocket();
        ws.Options.RemoteCertificateValidationCallback = (_, _, _, _) => true;
        
        var auth = Convert.ToBase64String(Encoding.ASCII.GetBytes($"riot:{password}"));
        ws.Options.SetRequestHeader("Authorization", $"Basic {auth}");
        
        var uri = new Uri($"wss://127.0.0.1:{port}/");
        
        await ws.ConnectAsync(uri, cancellationToken);
        await ws.SendAsync(
            Encoding.UTF8.GetBytes("[5, \"OnJsonApiEvent\"]"),
            WebSocketMessageType.Text,
            true,
            cancellationToken
        );
        _logger.Info("AutoAccept: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...");
        
        var buffer = new byte[8192];
        var messageBuilder = new StringBuilder();
        
        while (ws.State == WebSocketState.Open && !cancellationToken.IsCancellationRequested)
        {
            var result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), cancellationToken);
            
            if (result.MessageType == WebSocketMessageType.Close)
                break;
            
            messageBuilder.Append(Encoding.UTF8.GetString(buffer, 0, result.Count));
            
            if (result.EndOfMessage)
            {
                var message = messageBuilder.ToString();
                messageBuilder.Clear();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ ready-check —Å–æ–±—ã—Ç–∏—è
                if (!message.Contains("ready-check") && !message.Contains("ReadyCheck"))
                    continue;
                
                // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å InProgress –∏ –ù–ï Accepted (playerResponse == None)
                if (!message.Contains("\"state\":\"InProgress\""))
                    continue;
                    
                if (!message.Contains("\"playerResponse\":\"None\""))
                    continue;
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                double currentTimer = -1;
                try
                {
                    var timerMatch = System.Text.RegularExpressions.Regex.Match(message, @"""timer"":([\d.]+)");
                    if (timerMatch.Success)
                        currentTimer = double.Parse(timerMatch.Groups[1].Value, System.Globalization.CultureInfo.InvariantCulture);
                }
                catch { }
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —ç—Ç–æ—Ç ready-check (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5 —Å–µ–∫)
                if (currentTimer > 0 && _lastAcceptedReadyCheckTimer > 0 && 
                    Math.Abs(currentTimer - _lastAcceptedReadyCheckTimer) < 0.5)
                    continue;
                
                _lastAcceptedReadyCheckTimer = currentTimer;
                _logger.Info($"AutoAccept: üéØ Ready-check –æ–±–Ω–∞—Ä—É–∂–µ–Ω (—Ç–∞–π–º–µ—Ä: {currentTimer:F1}s), –ø—Ä–∏–Ω–∏–º–∞—é...");
                
                _ = Task.Run(async () =>
                {
                    try
                    {
                        await AcceptMatchAsync(port, password);
                    }
                    catch (Exception ex)
                    {
                        _logger.Error($"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è: {ex.Message}");
                    }
                }, CancellationToken.None);
            }
        }
        
        if (ws.State == WebSocketState.Open)
            await ws.CloseAsync(WebSocketCloseStatus.NormalClosure, "Closing", CancellationToken.None);
    }
    
    private async Task AcceptMatchAsync(int port, string password)
    {
        using var client = CreateHttpClient(port, password);
        
        _logger.Info("Ready-check –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ...");
        var response = await client.PostAsync("/lol-matchmaking/v1/ready-check/accept", null);
        
        if (response.IsSuccessStatusCode)
        {
            _logger.Info("‚úì –ú–∞—Ç—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç");
            MatchAccepted?.Invoke(this, "–ú–∞—Ç—á –ø—Ä–∏–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }
        else
        {
            _logger.Warning($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –º–∞—Ç—á: {response.StatusCode}");
        }
    }
    
    private async Task<(int Port, string Password)?> FindLcuLockfileInfoAsync()
    {
        string[] candidatePaths = new[]
        {
            Path.Combine("C:\\Riot Games", "League of Legends", "lockfile"),
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles),
                "Riot Games", "League of Legends", "lockfile"),
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86),
                "Riot Games", "League of Legends", "lockfile"),
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "Riot Games", "League of Legends", "lockfile")
        };

        foreach (var path in candidatePaths)
        {
            if (!File.Exists(path)) continue;
            
            try
            {
                using var fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                using var sr = new StreamReader(fs);
                var content = await sr.ReadToEndAsync();
                var parts = content.Split(':');
                
                if (parts.Length >= 5)
                {
                    _logger.Info($"AutoAccept: –ù–∞–π–¥–µ–Ω lockfile: {path}");
                    return (int.Parse(parts[2]), parts[3]);
                }
            }
            catch (IOException ex)
            {
                _logger.Warning($"AutoAccept: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {ex.Message}");
                continue;
            }
            catch (Exception ex)
            {
                _logger.Warning($"AutoAccept: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ lockfile: {ex.Message}");
                continue;
            }
        }
        
        return null;
    }
    
    private HttpClient CreateHttpClient(int port, string password)
    {
        var handler = new HttpClientHandler
        {
            ServerCertificateCustomValidationCallback = (_, _, _, _) => true // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        };
        
        var client = new HttpClient(handler)
        {
            BaseAddress = new Uri($"https://127.0.0.1:{port}/")
        };
        
        var base64Auth = Convert.ToBase64String(Encoding.ASCII.GetBytes($"riot:{password}"));
        client.DefaultRequestHeaders.Add("Authorization", $"Basic {base64Auth}");
        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        
        return client;
    }
}